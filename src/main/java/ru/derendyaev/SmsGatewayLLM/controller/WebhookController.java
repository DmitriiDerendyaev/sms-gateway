package ru.derendyaev.SmsGatewayLLM.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.derendyaev.SmsGatewayLLM.controller.dto.SmsWebhookRequest;
import ru.derendyaev.SmsGatewayLLM.gigaChat.models.message.GigaMessageRequest;
import ru.derendyaev.SmsGatewayLLM.gigaChat.models.message.GigaMessageResponse;
import ru.derendyaev.SmsGatewayLLM.restUtils.GigaChatClient;
import ru.derendyaev.SmsGatewayLLM.service.SmsService;
import ru.derendyaev.SmsGatewayLLM.service.UserService;
import ru.derendyaev.SmsGatewayLLM.utils.PromptBuilder;

@RestController
@RequestMapping("/webhook")
@RequiredArgsConstructor
public class WebhookController {

    private final GigaChatClient gigaChatClient;
    private final SmsService smsServiceClient;
    private final PromptBuilder promptBuilder;
    private final UserService userService;

    private static final String GIGA_CHAT_MODEL = "GigaChat";
    private static final String LLM_PREFIX = "/llm";

    private static final String ADMIN_CONTACT = "https://t.me/dmitrii_derendyaev";

    @PostMapping("/sms")
    public ResponseEntity<Void> handleSmsWebhook(@RequestBody SmsWebhookRequest request) {
        String userMessage = request.getPayload().getMessage();
        String phoneNumber = request.getPayload().getPhoneNumber();

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------
        var userOpt = userService.getByPhoneNumber(phoneNumber);
        if (userOpt.isEmpty()) {
            smsServiceClient.sendSms(phoneNumber,
                    "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + ADMIN_CONTACT +
                            "\n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: https://sms-gateway.derendyaev.ru/");
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        var user = userOpt.get();

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ -------------------
        if (user.getTokens() <= 0) {
            smsServiceClient.sendSms(phoneNumber,
                    "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞: https://sms-gateway.derendyaev.ru/\n" +
                            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);
            return ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).build();
        }

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /llm -------------------
        if (userMessage == null || !userMessage.trim().startsWith(LLM_PREFIX)) {
            smsServiceClient.sendSms(phoneNumber, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /llm");
            return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).build();
        }

        // ------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ LLM -------------------
        GigaMessageRequest gigaRequest = new GigaMessageRequest(
                GIGA_CHAT_MODEL,
                false,
                0,
                promptBuilder.buildMessages(userMessage),
                1,
                1024,
                1.0
        );

        GigaMessageResponse gigaResponse;
        try {
            gigaResponse = gigaChatClient.gigaMessageGenerate(gigaRequest);
        } catch (Exception e) {
            smsServiceClient.sendSms(phoneNumber,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ LLM. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }

        String reply = gigaResponse.toString();

        // ------------------- –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã -------------------
        int tokensUsed = gigaResponse.getUsage() != null ? gigaResponse.getUsage().getTotalTokens() : 1;
        int remainingTokens = Math.max(user.getTokens() - tokensUsed, 0);
        user.setTokens(remainingTokens);
        userService.saveUser(user);

        // ------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ SMS -------------------
        smsServiceClient.sendSms(phoneNumber,
                reply + "\n\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: " + tokensUsed +
                        "\nüìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: " + remainingTokens +
                        "\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);

        return ResponseEntity.status(HttpStatus.CREATED).build();
    }
}
