package ru.derendyaev.SmsGatewayLLM.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.derendyaev.SmsGatewayLLM.controller.dto.SmsWebhookRequest;
import ru.derendyaev.SmsGatewayLLM.gigaChat.models.message.GigaMessageRequest;
import ru.derendyaev.SmsGatewayLLM.gigaChat.models.message.GigaMessageResponse;
import ru.derendyaev.SmsGatewayLLM.model.UserEntity;
import ru.derendyaev.SmsGatewayLLM.restUtils.GigaChatClient;
import ru.derendyaev.SmsGatewayLLM.service.MessageDeduplicationService;
import ru.derendyaev.SmsGatewayLLM.service.SmsService;
import ru.derendyaev.SmsGatewayLLM.service.UserService;
import ru.derendyaev.SmsGatewayLLM.utils.PromptBuilder;

import java.util.Optional;
@Slf4j
@RestController
@RequestMapping("/webhook")
@RequiredArgsConstructor
public class WebhookController {

    private final GigaChatClient gigaChatClient;
    private final SmsService smsService;
    private final PromptBuilder promptBuilder;
    private final UserService userService;
    private final MessageDeduplicationService deduplicationService;

    @Value("${app.values.api.giga-chat.chat-settings.max-tokens:512}")
    private int defaultMaxTokens;

    private static final String GIGA_CHAT_MODEL = "GigaChat";
    private static final String LLM_PREFIX = "/llm";
    private static final String ADMIN_CONTACT = "https://t.me/dmitrii_derendyaev";

    @PostMapping("/sms")
    public ResponseEntity<Void> handleSmsWebhook(@RequestBody SmsWebhookRequest request) {
        String userMessage = request.getPayload().getMessage();
        String rawPhoneNumber = request.getPayload().getPhoneNumber();
        String externalMessageId = request.getPayload().getMessageId(); // –µ—Å–ª–∏ –µ—Å—Ç—å

        // ------------------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ -------------------
        String phoneNumber = userService.normalizePhoneNumber(rawPhoneNumber);
        if (phoneNumber == null) {
            log.info("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {}", rawPhoneNumber);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }

        // ------------------- –ê–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ -------------------
        if (deduplicationService.isDuplicate(userMessage, phoneNumber, externalMessageId)) {
            log.warn("‚ùó –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {}: {}", phoneNumber, userMessage);
            return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
        }
        deduplicationService.registerMessage(userMessage, phoneNumber, externalMessageId);

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /llm -------------------
        if (userMessage == null || !userMessage.trim().startsWith(LLM_PREFIX)) {
            log.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /llm, phone={}", phoneNumber);
            return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).build();
        }

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------
        Optional<UserEntity> varUser = userService.getByPhoneNumber(phoneNumber);
        if (varUser.isEmpty()) {
            smsService.sendSms(rawPhoneNumber,
                    "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + ADMIN_CONTACT +
                            "\n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: https://sms-gateway.derendyaev.ru/");
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        UserEntity user = varUser.get();
        int userTokens = user.getTokens();

        // ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ -------------------
        if (userTokens <= 0) {
            smsService.sendSms(rawPhoneNumber,
                    "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞: https://sms-gateway.derendyaev.ru/\n" +
                            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);
            return ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).build();
        }

        // ------------------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ maxTokens –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ -------------------
        int tokensForRequest = Math.min(defaultMaxTokens, userTokens);
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∏–º–µ–µ—Ç {} —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º maxTokens={}", phoneNumber, userTokens, tokensForRequest);

        // ------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ LLM -------------------
        GigaMessageResponse gigaResponse;
        try {
            GigaMessageRequest gigaRequest = new GigaMessageRequest(
                    GIGA_CHAT_MODEL,
                    false,
                    0,
                    promptBuilder.buildMessages(userMessage),
                    1,
                    tokensForRequest,
                    1.0
            );

            gigaResponse = gigaChatClient.gigaMessageGenerate(gigaRequest);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {}: {}", phoneNumber, e.getMessage(), e);
            smsService.sendSms(rawPhoneNumber,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ LLM. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }

        // ------------------- –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã -------------------
        int tokensUsed = gigaResponse.getUsage() != null ? gigaResponse.getUsage().getTotalTokens() : 1;
        int remainingTokens = Math.max(userTokens - tokensUsed, 0);
        user.setTokens(remainingTokens);
        userService.saveUser(user);

        // ------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ SMS -------------------
        smsService.sendSms(rawPhoneNumber,
                gigaResponse.toString() +
                        "\n\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: " + tokensUsed +
                        "\nüìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: " + remainingTokens +
                        "\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: " + ADMIN_CONTACT);

        log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {}, –æ—Å—Ç–∞–ª–æ—Å—å: {}", phoneNumber, tokensUsed, remainingTokens);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }
}