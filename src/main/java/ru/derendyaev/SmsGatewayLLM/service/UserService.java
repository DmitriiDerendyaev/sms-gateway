package ru.derendyaev.SmsGatewayLLM.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.derendyaev.SmsGatewayLLM.model.PromoCodeEntity;
import ru.derendyaev.SmsGatewayLLM.model.UserEntity;
import ru.derendyaev.SmsGatewayLLM.repository.PromoCodeRepository;
import ru.derendyaev.SmsGatewayLLM.repository.UserRepository;

import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final PromoCodeRepository promoCodeRepository;

    // ===================== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ =====================

    public Optional<UserEntity> getByTelegramId(Long telegramId) {
        return userRepository.findByTelegramId(telegramId);
    }

    public Optional<UserEntity> getByPhoneNumber(String rawPhone) {
        String phone = normalizePhoneNumber(rawPhone);
        if (phone == null) return Optional.empty();
        return userRepository.findByPhoneNumber(phone);
    }

    @Transactional
    public UserEntity saveUser(UserEntity user) {
        if (user.getPhoneNumber() != null) {
            user.setPhoneNumber(normalizePhoneNumber(user.getPhoneNumber()));
        }
        return userRepository.save(user);
    }


    public boolean hasTokens(String phoneNumber) {
        return userRepository.findByPhoneNumber(phoneNumber)
                .map(u -> u.getTokens() > 0)
                .orElse(false);
    }

    public String normalizePhoneNumber(String rawPhone) {
        if (rawPhone == null) return null;

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        String digits = rawPhone.replaceAll("\\D", "");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ >= 10
        if (digits.length() < 10) return null;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        return digits.substring(digits.length() - 10);
    }


    // ===================== –ü—Ä–æ–º–æ–∫–æ–¥—ã =====================

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω.
     */
    public boolean checkPromoExists(String code) {
        return promoCodeRepository.findByCodeAndIsUsedFalse(code).isPresent();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤.
     */
    @Transactional
    public String generatePromoCodes(int count, int tokenAmount) {
        StringBuilder codes = new StringBuilder();
        for (int i = 0; i < count; i++) {
            String code = UUID.randomUUID().toString().substring(0, 8).toUpperCase();
            promoCodeRepository.save(PromoCodeEntity.builder()
                    .code(code)
                    .tokenAmount(tokenAmount)
                    .build());
            codes.append(code).append("\n");
        }
        return codes.toString();
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).
     */
    @Transactional
    public String activatePromo(Long telegramId, String code) {
        PromoCodeEntity promo = promoCodeRepository.findByCode(code)
                .orElseThrow(() -> new RuntimeException("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (promo.getIsUsed()) return "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.";

        UserEntity user = userRepository.findByTelegramId(telegramId)
                .orElseGet(() -> userRepository.save(UserEntity.builder()
                        .telegramId(telegramId)
                        .tokens(0)
                        .build()));

        user.setTokens(user.getTokens() + promo.getTokenAmount());
        promo.setIsUsed(true);
        promo.setUsedBy(telegramId);

        userRepository.save(user);
        promoCodeRepository.save(promo);

        return "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ " + promo.getTokenAmount() + " —Ç–æ–∫–µ–Ω–æ–≤.";
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     */
    @Transactional
    public String activatePromoWithPhone(Long telegramId, String username, String code, String phoneNumber) {
        Optional<PromoCodeEntity> promoOpt = promoCodeRepository.findByCodeAndIsUsedFalse(code);
        if (promoOpt.isEmpty()) {
            return "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.";
        }

        PromoCodeEntity promo = promoOpt.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        UserEntity user = userRepository.findByTelegramId(telegramId)
                .orElseGet(() -> userRepository.save(UserEntity.builder()
                        .telegramId(telegramId)
                        .username(username)
                        .phoneNumber(normalizePhoneNumber(phoneNumber))
                        .tokens(0)
                        .build()));

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user.setPhoneNumber(phoneNumber);
        user.setUsername(username);
        user.setTokens(user.getTokens() + promo.getTokenAmount());
        userRepository.save(user);

        // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º
        promo.setIsUsed(true);
        promo.setUsedBy(telegramId);
        promoCodeRepository.save(promo);

        return "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: " + phoneNumber +
                "\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: " + promo.getTokenAmount();
    }
}
