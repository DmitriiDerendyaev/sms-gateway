package ru.derendyaev.SmsGatewayLLM.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.derendyaev.SmsGatewayLLM.model.PromoCodeEntity;
import ru.derendyaev.SmsGatewayLLM.model.UserEntity;
import ru.derendyaev.SmsGatewayLLM.repository.PromoCodeRepository;
import ru.derendyaev.SmsGatewayLLM.repository.UserRepository;

import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final PromoCodeRepository promoCodeRepository;

    // ===================== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ =====================

    public Optional<UserEntity> getByTelegramId(Long telegramId) {
        return userRepository.findByTelegramId(telegramId);
    }

    public Optional<UserEntity> getByPhoneNumber(String rawPhone) {
        String phone = normalizePhoneNumber(rawPhone);
        if (phone == null) return Optional.empty();
        return userRepository.findByPhoneNumber(phone);
    }

    @Transactional
    public UserEntity saveUser(UserEntity user) {
        if (user.getPhoneNumber() != null) {
            user.setPhoneNumber(normalizePhoneNumber(user.getPhoneNumber()));
        }
        return userRepository.save(user);
    }


    public boolean hasTokens(String phoneNumber) {
        return userRepository.findByPhoneNumber(phoneNumber)
                .map(u -> u.getTokens() > 0)
                .orElse(false);
    }

    public String normalizePhoneNumber(String rawPhone) {
        if (rawPhone == null) return null;

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        String digits = rawPhone.replaceAll("\\D", "");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ >= 10
        if (digits.length() < 10) return null;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        return digits.substring(digits.length() - 10);
    }


    // ===================== –ü—Ä–æ–º–æ–∫–æ–¥—ã =====================

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω.
     */
    public boolean checkPromoExists(String code) {
        return promoCodeRepository.findByCodeAndIsUsedFalse(code).isPresent();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤.
     */
    @Transactional
    public String generatePromoCodes(int count, int tokenAmount) {
        StringBuilder codes = new StringBuilder();
        for (int i = 0; i < count; i++) {
            String code = UUID.randomUUID().toString().substring(0, 8).toUpperCase();
            promoCodeRepository.save(PromoCodeEntity.builder()
                    .code(code)
                    .tokenAmount(tokenAmount)
                    .build());
            codes.append(code).append("\n");
        }
        return codes.toString();
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).
     */
    @Transactional
    public String activatePromo(Long telegramId, String code) {
        PromoCodeEntity promo = promoCodeRepository.findByCode(code)
                .orElseThrow(() -> new RuntimeException("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (promo.getIsUsed()) return "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.";

        UserEntity user = userRepository.findByTelegramId(telegramId)
                .orElseGet(() -> userRepository.save(UserEntity.builder()
                        .telegramId(telegramId)
                        .tokens(0)
                        .build()));

        user.setTokens(user.getTokens() + promo.getTokenAmount());
        promo.setIsUsed(true);
        promo.setUsedBy(telegramId);

        userRepository.save(user);
        promoCodeRepository.save(promo);

        return "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ " + promo.getTokenAmount() + " —Ç–æ–∫–µ–Ω–æ–≤.";
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     */
    @Transactional
    public String activatePromoWithPhone(Long telegramId, String username, String promoCode, String rawPhone) {
        String phone = normalizePhoneNumber(rawPhone);
        if (phone == null) {
            return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        Optional<PromoCodeEntity> promoOpt = promoCodeRepository.findByCode(promoCode);
        if (promoOpt.isEmpty() || promoOpt.get().getIsUsed()) {
            return "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.";
        }
        PromoCodeEntity promo = promoOpt.get();

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        Optional<UserEntity> userOpt = userRepository.findByTelegramId(telegramId);

        if (userOpt.isEmpty()) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
            UserEntity newUser = new UserEntity();
            newUser.setTelegramId(telegramId);
            newUser.setUsername(username);
            newUser.setPhoneNumber(phone);
            newUser.setTokens(promo.getTokenAmount());
            userRepository.save(newUser);

            promo.setIsUsed(true);
            promoCodeRepository.save(promo);

            return "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–ø–µ—Ä–≤—ã–µ! –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: +" + phone +
                    "\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ " + promo.getTokenAmount() + " —Ç–æ–∫–µ–Ω–æ–≤.";
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        UserEntity user = userOpt.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        if (phone.equals(user.getPhoneNumber())) {
            // –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
            user.setTokens(user.getTokens() + promo.getTokenAmount());
            userRepository.save(user);

            promo.setIsUsed(true);
            promoCodeRepository.save(promo);

            return "üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ " + promo.getTokenAmount() +
                    " —Ç–æ–∫–µ–Ω–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + user.getTokens();
        }

        // –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–î
        Optional<UserEntity> phoneOwnerOpt = userRepository.findByPhoneNumber(phone);
        if (phoneOwnerOpt.isPresent()) {
            // –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –µ–º—É
            UserEntity phoneOwner = phoneOwnerOpt.get();
            phoneOwner.setTokens(phoneOwner.getTokens() + promo.getTokenAmount());
            userRepository.save(phoneOwner);

            promo.setIsUsed(true);
            promoCodeRepository.save(promo);

            return "üì≤ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º +" + phone +
                    "\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ " + promo.getTokenAmount() + " —Ç–æ–∫–µ–Ω–æ–≤.";
        }

        // –¢–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî –æ—à–∏–±–∫–∞
        return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.";
    }

}
