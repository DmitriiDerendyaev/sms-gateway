package ru.derendyaev.SmsGatewayLLM.bot;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
import ru.derendyaev.SmsGatewayLLM.service.UserService;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component
@RequiredArgsConstructor
public class SmsGatewayBot extends TelegramLongPollingBot {

    private final UserService userService;
    private final Map<Long, String> userState = new ConcurrentHashMap<>();
    private final Map<Long, String> pendingPromo = new ConcurrentHashMap<>();

    @Value("${app.values.bot.username}")
    private String botUsername;

    @Value("${app.values.bot.token}")
    private String botToken;

    @PostConstruct
    public void register() throws Exception {
        TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
        api.registerBot(this);
        log.info("‚úÖ Telegram Bot '{}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", botUsername);
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        String message = update.getMessage().getText().trim();
        Long chatId = update.getMessage().getChatId();
        String username = update.getMessage().getFrom().getUserName();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userState.containsKey(chatId)) {
            String state = userState.get(chatId);

            if (state.equals("WAITING_PHONE")) {
                String phone = message;
                String promo = pendingPromo.remove(chatId);
                String result = userService.activatePromoWithPhone(chatId, username, promo, phone);
                sendMessage(chatId, result);
                userState.remove(chatId);
                return;
            }
        }

        // –ö–æ–º–∞–Ω–¥–∞ /start
        if (message.equals("/start")) {
            String welcome = """
                    üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMS-Gateway!

                    üîë –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–ª—É—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
                    üëâ [@dmitrii_derendyaev](https://t.me/dmitrii_derendyaev)

                    üåê –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: [sms-gateway.derendyaev.ru](https://sms-gateway.derendyaev.ru)

                    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:
                    `/promo <—Ç–≤–æ–π_–∫–æ–¥>`
                    """;
            sendMessage(chatId, welcome);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ /promo
        if (message.startsWith("/promo")) {
            String[] parts = message.split(" ");
            if (parts.length < 2) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /promo ABCD1234");
                return;
            }

            String promoCode = parts[1];
            boolean valid = userService.checkPromoExists(promoCode);
            if (!valid) {
                sendMessage(chatId, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.");
                return;
            }

            pendingPromo.put(chatId, promoCode);
            userState.put(chatId, "WAITING_PHONE");
            sendMessage(chatId, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º:");
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ /gen (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤)
        if (message.startsWith("/gen")) {
            String[] parts = message.split(" ");
            if (parts.length < 3) {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gen <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–æ–∫–µ–Ω—ã>");
                return;
            }
            int count = Integer.parseInt(parts[1]);
            int tokens = Integer.parseInt(parts[2]);
            String codes = userService.generatePromoCodes(count, tokens);
            sendMessage(chatId, "üéüÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n" + codes);
            return;
        }

        sendMessage(chatId, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /promo <–∫–æ–¥>");
    }

    private void sendMessage(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .disableWebPagePreview(true)
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}
