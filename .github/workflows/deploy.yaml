name: Build, Test and Deploy SmsGatewayLLM to VPS

on:
  push:
    branches:
      - main

jobs:
  # =============================
  # 1. СБОРКА
  # =============================
  build:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Установка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Сборка проекта
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Проверка наличия JAR-файла
      - name: List target directory
        run: ls -la target/

  # =============================
  # 2. ТЕСТИРОВАНИЕ
  # =============================
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Запуск юнит-тестов
      - name: Run unit tests
        run: mvn test

  # =============================
  # 3. ДЕПЛОЙ
  # =============================
  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Сборка проекта (повторяем, так как артефакты не сохраняем)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Deploy to VPS
        env:
          SSH_USER: homic
          SSH_HOST: 91.146.28.240
          SSH_PASSWORD: 360317wifi
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass

          if [ ! -f target/SmsGatewayLLM-0.0.1-SNAPSHOT.jar ]; then
            echo "Error: JAR file not found"
            exit 1
          fi

          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p /home/$SSH_USER/deploy/sms-gateway-llm/github-actions"

          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no target/SmsGatewayLLM-0.0.1-SNAPSHOT.jar $SSH_USER@$SSH_HOST:/home/$SSH_USER/deploy/sms-gateway-llm/github-actions/app.jar
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no Dockerfile $SSH_USER@$SSH_HOST:/home/$SSH_USER/deploy/sms-gateway-llm/github-actions/Dockerfile

          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd /home/$USER/deploy/sms-gateway-llm/github-actions
            ls -la

            docker stop sms-gateway-llm || true
            docker rm sms-gateway-llm || true
            docker rmi sms-gateway-llm:latest || true
            docker network create app-network || true

            docker build -t sms-gateway-llm:latest .
            docker run -d --name sms-gateway-llm --network app-network -p 8041:8041 sms-gateway-llm:latest
          EOF
